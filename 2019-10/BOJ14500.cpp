#include <cstdio>
#include <cstring>
#include <queue>
#include <algorithm>
using namespace std;

struct coor{int x,y;};
struct len{int r,c;};
const int SIZE = 19;
int n, m;
int b[505][505];
int vi[505][505];
int t[SIZE][4][4] = {
  {
    {1, 0, 0, 0},
    {1, 1, 0, 0},
    {0, 1, 0, 0},
    {0, 0, 0, 0}
  },
  {
    {0, 1, 1, 0},
    {1, 1, 0, 0},
    {0, 0, 0, 0},
    {0, 0, 0, 0}
  },
  {
    {1, 1, 1, 0},
    {0, 1, 0, 0},
    {0, 0, 0, 0},
    {0, 0, 0, 0}
  },
  {
    {0, 1, 0, 0},
    {1, 1, 0, 0},
    {0, 1, 0, 0},
    {0, 0, 0, 0}
  },
  {
    {0, 1, 0, 0},
    {1, 1, 1, 0},
    {0, 0, 0, 0},
    {0, 0, 0, 0}
  },
  {
    {1, 0, 0, 0},
    {1, 1, 0, 0},
    {1, 0, 0, 0},
    {0, 0, 0, 0}
  },
  {
    {1, 0, 0, 0},
    {1, 0, 0, 0},
    {1, 1, 0, 0},
    {0, 0, 0, 0}
  },
  {
    {1, 1, 1, 0},
    {1, 0, 0, 0},
    {0, 0, 0, 0},
    {0, 0, 0, 0}
  },
  {
    {1, 1, 0, 0},
    {0, 1, 0, 0},
    {0, 1, 0, 0},
    {0, 0, 0, 0}
  },
  {
    {0, 0, 1, 0},
    {1, 1, 1, 0},
    {0, 0, 0, 0},
    {0, 0, 0, 0}
  },
  {
    {1, 1, 1, 1},
    {0, 0, 0, 0},
    {0, 0, 0, 0},
    {0, 0, 0, 0}
  },
  {
    {1, 0, 0, 0},
    {1, 0, 0, 0},
    {1, 0, 0, 0},
    {1, 0, 0, 0}
  },
  {
    {1, 1, 0, 0},
    {1, 1, 0, 0},
    {0, 0, 0, 0},
    {0, 0, 0, 0}
  },
  {
    {0, 1, 0, 0},
    {1, 1, 0, 0},
    {1, 0, 0, 0},
    {0, 0, 0, 0}
  },
  {
    {1, 1, 0, 0},
    {0, 1, 1, 0},
    {0, 0, 0, 0},
    {0, 0, 0, 0}
  },
  {
    {0, 1, 0, 0},
    {0, 1, 0, 0},
    {1, 1, 0, 0},
    {0, 0, 0, 0}
  },
  {
    {1, 0, 0, 0},
    {1, 1, 1, 0},
    {0, 0, 0, 0},
    {0, 0, 0, 0}
  },
  {
    {1, 1, 0, 0},
    {1, 0, 0, 0},
    {1, 0, 0, 0},
    {0, 0, 0, 0}
  },
  {
    {1, 1, 1, 0},
    {0, 0, 1, 0},
    {0, 0, 0, 0},
    {0, 0, 0, 0}
  }
};
int dx[4] = {-1,1,0,0}, dy[4] = {0,0,-1,1};
len tl[SIZE] = {
  {3,2},{2,3},{2,3},{3,2},
  {2,3},{3,2},{3,2},{2,3},
  {3,2},{2,3},{1,4},{4,1},
  {2,2},{3,2},{2,3},{3,2},
  {2,3},{3,2},{2,3}
};

int main(void)
{
  scanf("%d%d",&n,&m);
  for(int i=0; i<n; i++){
    for(int j=0; j<m; j++){
      scanf("%d",&b[i][j]);
    }
  }
  int ans = 0;
  for(int i=0; i<SIZE; i++){
    queue<coor> q;
    memset(vi,0,sizeof(vi));
    q.push((coor){0,0});
    vi[0][0] = 1;
    while(!q.empty()){
      coor cur = q.front(); q.pop();
      int sum = 0;
      for(int j=0; j<4; j++){
        for(int k=0; k<4; k++){
          if(t[i][j][k]==1){
            sum += b[cur.x+j][cur.y+k];
          }
        }
      }
      ans = max(ans, sum);
      for(int j=0; j<4; j++){
        int _dx = cur.x + dx[j], _dy = cur.y + dy[j];
        if(_dx < 0 || _dx >= n || _dy < 0 || _dy >= m) continue;
        if(_dx + tl[i].r > n || _dy + tl[i].c > m) continue;
        if(vi[_dx][_dy]) continue;
        q.push((coor){_dx,_dy});
        vi[_dx][_dy] = 1;
      }
    }
  }
  printf("%d\n", ans);
  return 0;
}