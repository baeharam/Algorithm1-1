#include <iostream>
#include <algorithm>

int dp[300+1][300+1];

int main(void)
{
	int n; std::cin >> n;
	
	// 계단의 값을 초기화해준다.
	// dp[i][1]은 연속되지 않은 경우를 의미하고 dp[i][2]는 연속된 경우를 의미한다.
	// 또한 dp[i][0]에 dp[i][1]을 복사해주는 이유는 dp[i][1]의 값이 변하기 때문이다.
	for (int i = 1; i <= n; i++){
		std::cin >> dp[i][1];
		dp[i][0] = dp[i][1];
	}

	// i가 2부터 시작하는 이유는 2번째부터 연속될 수 있기 때문이다.
	for (int i = 2; i <= n; i++){
		// 연속되지 않은 경우이므로 바로 전 값을 더해주는 것이 아닌 2개 이전의 값을 더해줘야 한다.
		// 2개 이전의 값은 연속된 것일수도 있고 아닐수도 있으므로 그 경우 중 더 큰 값을 더해준다.
		dp[i][1] += (dp[i - 2][1] > dp[i - 2][2] ? dp[i - 2][1] : dp[i - 2][2]);

		// 연속된 경우이므로 바로 전 값을 더해주는데 그 전 값은 연속되면 안되기 때문에 dp[i][1]을 더해줘야 한다.
		// 그러나 dp[i][1]이 위에서 변하기 때문에 dp[i][1]들의 값을 복사한 dp[i][0]을 이용해서 더해준다.
		dp[i][2] = dp[i][0] + dp[i - 1][1];
	}

	std::cout << std::max(dp[n][1], dp[n][2]);


	return 0;
}